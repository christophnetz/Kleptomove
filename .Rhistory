#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0.1,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = NA,
out
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = NA,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.shape = NA,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2[stringr::str_detect(layer, "items", negate = TRUE), ]) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0.1,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
#### make some plot ####
ggplot(data2) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0.1,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
data2[, type2 := ifelse(stringr::str_detect(layer, "items"),
"items", layer)]
#### make some plot ####
ggplot(data2) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0.1,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
data2
# sample 1% data
data2 <- data[,.SD[sample(.N, .N/100)],
by = .(type, layer, cell_capacity)]
# separate by intake
data2[, type2 := ifelse(stringr::str_detect(layer, "intake"),
"intake", "position")]
data2
data2[, type2 := ifelse(stringr::str_detect(layer, "item"),
"items", type2)]
data2
#### make some plot ####
ggplot(data2) +
geom_boxplot(aes(x = factor(cell_capacity),
y = value,
fill = layer),
# colour = "grey",
width = 0.4,
outlier.size = 0.1,
position = position_dodge(width = 0.5))+
# geom_ribbon(aes(cell_capacity,
#                 ymin = mean + 1 - sd,
#                 ymax = mean + 1 + sd,
#                 group = interaction(repl, layer, type),
#                 fill = layer),
#             alpha = 0.1)+
# geom_line(aes(cell_capacity, mean + 1,
#               group = interaction(repl, layer, type),
#               col = layer),
#           size = 1, alpha = 0.5) +
scale_fill_brewer(palette = "Pastel1")+
# scale_fill_brewer(palette = "Greys")+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")+
coord_cartesian(expand = T)+
scale_y_sqrt()+
# scale_y_log10(breaks = c(1, 10, 100),
#               labels = c(0, 10, 100))+
labs(x = "cell capacity (items)",
y = "mean value")
ggsave(filename = "figures/fig_agent_item_distribution.png",
dpi = 300, width = 4, height = 8)
ggsave(filename = "figures/fig_agent_item_distribution.png",
dpi = 300, width = 6, height = 8)
data2
library(stringr)
data2[str_detect(layer, "items", negate = T)]
data2[str_detect(layer, "items", negate = T),]
data2[str_detect(layer, "items", negate = T),] %>% dcast(layer ~ type)
data2[str_detect(layer, "items", negate = T),] %>% dcast(tyep ~ layer)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type ~ layer)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + value ~ layer)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type ~ layer, value.var = value)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value")
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = "mean")
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = mean)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = function(x)mean(x, na.rm = T))
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = function(z) mean(z, na.rm = T))
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = sum)
data2[str_detect(layer, "items", negate = T),] %>% dcast(type + x + y ~ layer, value.var = "value", fun.aggregate = function(z) sum(z / 3))
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + x + y ~ layer,
value.var = "value",
fun.aggregate = function(z) sum(z / 3))
class(data3)
data3[, `:=`(inpc_forager = foragers_intake / foragers,
inpc_klept = klepts_intake / klepts)]
data2
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity ~ layer,
value.var = "value",
fun.aggregate = function(z) sum(z / 3))
data2
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity ~ layer,
value.var = "value",
fun.aggregate = mean)
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity ~ layer,
value.var = "value",
fun.aggregate = median)
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity + repl ~ layer,
value.var = "value",
fun.aggregate = mean)
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity + repl + x+ y ~ layer,
value.var = "value",
fun.aggregate = I)
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity + repl + x+ y ~ layer,
value.var = "value",
fun.aggregate = identity)
colnames(data2)
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + type2 + cell_capacity + repl + x + y ~ layer,
value.var = "value",
fun.aggregate = identity)
data3
# get per capita intake
data3 <- setDF(data3)
data3
# get per capita intake
data3 <- setDF(data2) %>%
tidyr::pivot_wider(names_from = "layer",
values_from = "value")
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + type2 + cell_capacity + repl + x + y ~ layer,
value.var = "value",
fun.aggregate = sum)
data2
class(data2)
setDT(data2)
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + type2 + cell_capacity + repl + x + y ~ layer,
value.var = "value",
fun.aggregate = sum)
data3
data3[, `:=`(inpc_forager = foragers_intake / foragers,
inpc_klept = klepts_intake / klepts)]
data3
data3 <- melt(data3,
id.vars = setdiff(colnames(data3), c("inpc_forager",
"inpc_klept")))
data3
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = layer))
data3
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity + repl + x + y ~ layer,
value.var = "value",
fun.aggregate = sum)
data3
# get per capita intake
data3 <- data2[str_detect(layer, "items", negate = T),] %>%
dcast(type + cell_capacity + repl ~ layer,
value.var = "value",
fun.aggregate = sum)
data3
data3[, `:=`(inpc_forager = foragers_intake / foragers,
inpc_klept = klepts_intake / klepts)]
data3 <- melt(data3,
id.vars = setdiff(colnames(data3), c("inpc_forager",
"inpc_klept")))
data3
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(type2 ~ type,
scales = "free_y")
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")+
scale_y_sqrt()
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")+
scale_y_sqrt()+
coord_cartesian(ylim = c(0, 3))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")+
# scale_y_sqrt()+
coord_cartesian(ylim = c(0, 3))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable))+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")+
# scale_y_sqrt()+
coord_cartesian(ylim = c(0, 1))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable),
notch = T)+
theme(legend.position = "top")+
facet_grid(~type,
scales = "free_y")+
# scale_y_sqrt()+
coord_cartesian(ylim = c(0, 1))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable),
notch = T)+
theme(legend.position = "top")+
scale_fill_brewer(palette = "Pastel1")+
facet_grid(~type,
scales = "free_y")+
# scale_y_sqrt()+
coord_cartesian(ylim = c(0, 1))
ggplot(data3)+
geom_boxplot(aes(factor(cell_capacity),
value,
fill = variable),
notch = T)+
theme(legend.position = "top")+
scale_fill_brewer(palette = "Pastel1", direction = -1)+
facet_grid(~type,
scales = "free_y")+
# scale_y_sqrt()+
coord_cartesian(ylim = c(0, 1))
